@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.demo.model.Section",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1322970774 { 
   	label=example
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_134842393 { 
   	label=demo
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Bridge838661137[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Bridge</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   position: Position [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   push: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   time: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ delPosition()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Group838661137[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Group</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   alive: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nb: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   position: Position [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ delPosition()</TD></TR>
<TR><TD ALIGN="LEFT" >+ roule()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Position838661137[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Position</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   group: Group [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   name: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Section838661137[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Section</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   before: Section [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bridge: Bridge [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   index: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   suivant: Section [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sw: Switch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   track: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ add(suivant: Section)</TD></TR>
<TR><TD ALIGN="LEFT" >+ add(group: Group)</TD></TR>
<TR><TD ALIGN="LEFT" >+ add(bridge: Bridge)</TD></TR>
<TR><TD ALIGN="LEFT" >+ add(sw: Switch)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addBefore(before: Section)</TD></TR>
<TR><TD ALIGN="LEFT" >+ delete()</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteBridge()</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteGroup()</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteSwitch()</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(): Section</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];


Switch838661137[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Switch</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   present: Section [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   trackBegin: Section [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   trackEnd: Section [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   valid: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addSection(section: Section)</TD></TR>
<TR><TD ALIGN="LEFT" >+ changeTrack(track: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ delSection(c: Section)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOtherSection(c: Section): Section</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(): Section</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(section: Section): Section</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Track838661137[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Track</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addNewSection()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addNewSection(idx: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ delete()</TD></TR>
<TR><TD ALIGN="LEFT" >+ nbSwitch(): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Train838661137[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Train</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   originPosition: Section [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   present: Section [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ run(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ simulation()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Bridge838661137 -> Position838661137[label="position
[0..1]"];
Bridge838661137 -> Section838661137[label="delPosition() -> deleteBridge()"];
Generator838661137 -> Bridge838661137[label="bridges
[0..*]"];
Generator838661137 -> Group838661137[label="groups
[0..*]"];
Generator838661137 -> Switch838661137[label="switchs
[0..*]"];
Generator838661137 -> Track838661137[label="tracks
[0..*]"];
Generator838661137 -> Train838661137[label="train
[0..1]"];
Group838661137 -> Position838661137[label="position
[0..1]"];
NodeController2030510442 -> Generator838661137[label="generator
[0..1]"];
Position838661137 -> Bridge838661137[arrowhead=none, arrowtail=empty, dir=both];
Position838661137 -> Group838661137[arrowhead=none];
Position838661137 -> Group838661137[label="group
[0..1]"];
Position838661137 -> Section838661137[arrowhead=none, arrowtail=empty, dir=both];
Position838661137 -> Track838661137[arrowhead=none];
Position838661137 -> Train838661137[arrowhead=none];
Section838661137 -> Bridge838661137[label="bridge
[0..1]"];
Section838661137 -> Switch838661137[label="sw
[0..1]"];
SectionController2030510442 -> Generator838661137[label="generator
[0..1]"];
Switch838661137 -> Section838661137[label="present
[0..1]"];
Switch838661137 -> Section838661137[label="trackBegin
[0..1]"];
Switch838661137 -> Section838661137[label="trackEnd
[0..1]"];
Train838661137 -> Group838661137[arrowhead=none];
Train838661137 -> Position838661137[arrowhead=none];
Train838661137 -> Section838661137[label="originPosition
[0..1]"];
Train838661137 -> Section838661137[label="present
[0..1]"];
Train838661137 -> Track838661137[arrowhead=none];
    
}
@enduml